/**
 * Copyright 2020 Colin Doig.  Distributed under the MIT license.
 */
import JsonMember from '../JsonMember';
import MarketBettingType from '../sport/enum/MarketBettingType';
import MarketLineRangeInfo, { IMarketLineRangeInfoOptions } from '../sport/MarketLineRangeInfo';
import PriceLadderDescription, { IPriceLadderDescriptionOptions } from '../sport/PriceLadderDescription';
export interface IMarketDescriptionOptions {
    persistenceEnabled: boolean;
    bspMarket: boolean;
    marketTime: Date | string;
    suspendTime: Date | string;
    settleTime?: Date | string;
    bettingType: MarketBettingType | string;
    turnInPlayEnabled: boolean;
    marketType: string;
    regulator: string;
    marketBaseRate: number;
    discountAllowed: boolean;
    wallet?: string;
    rules?: string;
    rulesHasDate?: boolean;
    clarifications?: string;
    eachWayDivisor?: number;
    lineRangeInfo?: MarketLineRangeInfo | IMarketLineRangeInfoOptions;
    raceType?: string;
    priceLadderDescription?: PriceLadderDescription | IPriceLadderDescriptionOptions;
}
export default class MarketDescription extends JsonMember {
    private persistenceEnabled;
    private bspMarket;
    private marketTime;
    private suspendTime;
    private settleTime?;
    private bettingType;
    private turnInPlayEnabled;
    private marketType;
    private regulator;
    private marketBaseRate;
    private discountAllowed;
    private wallet?;
    private rules?;
    private rulesHasDate?;
    private clarifications?;
    private eachWayDivisor?;
    private lineRangeInfo?;
    private raceType?;
    private priceLadderDescription?;
    constructor(options: IMarketDescriptionOptions);
    toJson(): IMarketDescriptionOptions;
    getPersistenceEnabled(): boolean;
    setPersistenceEnabled(persistenceEnabled: boolean): void;
    getBspMarket(): boolean;
    setBspMarket(bspMarket: boolean): void;
    getMarketTime(): Date;
    setMarketTime(marketTime: Date): void;
    getSuspendTime(): Date;
    setSuspendTime(suspendTime: Date): void;
    getSettleTime(): Date | undefined;
    setSettleTime(settleTime: Date): void;
    getBettingType(): MarketBettingType;
    setBettingType(bettingType: MarketBettingType): void;
    getTurnInPlayEnabled(): boolean;
    setTurnInPlayEnabled(turnInPlayEnabled: boolean): void;
    getMarketType(): string;
    setMarketType(marketType: string): void;
    getRegulator(): string;
    setRegulator(regulator: string): void;
    getMarketBaseRate(): number;
    setMarketBaseRate(marketBaseRate: number): void;
    getDiscountAllowed(): boolean;
    setDiscountAllowed(discountAllowed: boolean): void;
    getWallet(): string | undefined;
    setWallet(wallet: string): void;
    getRules(): string | undefined;
    setRules(rules: string): void;
    getRulesHasDate(): boolean | undefined;
    setRulesHasDate(rulesHasDate: boolean): void;
    getClarifications(): string | undefined;
    setClarifications(clarifications: string): void;
    getEachWayDivisor(): number | undefined;
    setEachWayDivisor(eachWayDivisor: number): void;
    getLineRangeInfo(): MarketLineRangeInfo | undefined;
    setLineRangeInfo(lineRangeInfo: MarketLineRangeInfo): void;
    getRaceType(): string | undefined;
    setRaceType(raceType: string): void;
    getPriceLadderDescription(): PriceLadderDescription | undefined;
    setPriceLadderDescription(priceLadderDescription: PriceLadderDescription): void;
}
